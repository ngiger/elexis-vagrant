---
# encoding: utf-8
# Copyright 2013 by Niklaus Giger <niklaus.giger@member.fsf.org>

managed_note: '(c) Copyright 2014 by Niklaus Giger. Managed by puppet. Variables come from hieradata/common.yaml'
elexis::admin::ensure: true
elexis::admin::packages: [fish, mosh, screen, lm-sensors, git, unzip, dlocate, mlocate, htop, curl, bzr, unattended-upgrades]

ssh::access::allow:
  - 'elexis'
  - 'vagrant'

apt::sources:
 'debian_security':
     location: 'http://security.debian.org/'
     release: 'wheezy/updates'
     repos: 'main contrib non-free'
     required_packages: 'debian-keyring debian-archive-keyring'
     key: '46925553'
     key_server: 'subkeys.pgp.net'
     pin: '-10'
     include_src: 'true'
     include_deb: 'true'
 'debian_wheezy':
     location: 'http://mirror.switch.ch/ftp/mirror/debian/'
     release: 'wheezy'
     repos: 'main contrib non-free'
     required_packages: 'debian-keyring debian-archive-keyring'
     key: '46925553'
     key_server: 'subkeys.pgp.net'
     pin: '-10'
     include_src: 'true'
     include_deb: 'true'
 'debian_jessie':
     location: 'http://mirror.switch.ch/ftp/mirror/debian/'
     release: 'jessie'
     repos: 'main contrib non-free'
     required_packages: 'debian-keyring debian-archive-keyring'
     key: '46925553'
     key_server: 'subkeys.pgp.net'
     pin: '-10'
     include_src: 'true'
     include_deb: 'true'
 'puppetlabs':
     location: 'http://apt.puppetlabs.com'
     repos: 'main'
     key: '4BD6EC30'
     key_server: 'pgp.mit.edu'

# These are the default values for PostgreSQL
# here goes the dump of postres DB
elexis::pg_dump_dir:            /opt/backup/pg/dumps/
# here goes the backups of the dumps of postres DB
elexis::pg_backup_dir:          /opt/backup/pg/backups/
elexis::pg_backup_files:        /opt/backup/pg/*/pg_backup_*.sql
# next lines must be in sync with dbs
elexis::pg_main_db_name:     elexis
elexis::pg_tst_db_name:      test
elexis::pg_main_db_user:     elexis
elexis::pg_main_db_password: elexisTest
elexis::pg_remote_backup:    false  # or backup_server:/path/to/backup
# definition of postgresql database
# unfortunately the syntax via puppet is signifcantly different so we need a different variable for mysql!
pg_dbs:
  -
    db_name: elexis
    db_user: elexis
    # specify either db_password or db_pw_hash
    # puppet apply --execute 'notify { "test": message => postgresql_password("elexis", "elexisTest") }' --modulepath /vagrant/modules/  
    db_password: elexisTest
#    db_pw_hash: md5e0925320617bda379cf9db294f07caf2
    # SELECT or UPDATE are not supported, only worked with ALL
    db_privileges: ALL
    encoding: utf-8
    locale:   de_CH
  -
    db_name: test
    db_user: elexis
    db_privileges: ALL
    encoding: utf-8
    locale:   de_CH
  -  
    db_name: elexis
    db_user: readerX
    db_password: elexisTest
    db_privileges: 'ALL'
    locale:   de_CH
  -
    db_name: test
    db_user: reader
    db_password: elexisTest
    db_privileges: ALL
    encoding: utf-8
    locale:   de_CH

# At the moment (May 2013, September 2014) you have to add each user as user@% and user@localhost
# to give him/her access to the database. I have no time fix the mysql module!
# to test read-only try mysql CREATE TABLE example (id INT,  data VARCHAR(100));
# password_hash for a MySQL user in the puppetlabs-mysql Puppet Forge module, run
# mysql -s -e "SELECT PASSWORD('elexisTest');"
elexis::mysql_server::users:
  "elexis@localhost":
    ensure:                  present
    password_hash: '*0B9FC6091D135BD4050DDBCA19FC9F73D7527C8B'
  "reader@localhost":
    ensure:                  present
    password_hash: '*0B9FC6091D135BD4050DDBCA19FC9F73D7527C8B'
  "elexis@%":
    ensure:                  present
    password_hash: '*0B9FC6091D135BD4050DDBCA19FC9F73D7527C8B'
  "reader@%":
    ensure:                  present
    password_hash: '*0B9FC6091D135BD4050DDBCA19FC9F73D7527C8B'

elexis::mysql_server::grants:
  "elexis@localhost/elexis.*":
    ensure:                  present
    options:                 ['GRANT']
    privileges:              ['ALL']
    table:                   'elexis.*'
    user:                    'elexis@localhost'
  "elexis@localhost/test.*":
    ensure:                  present
    options:                 ['GRANT']
    privileges:              ['ALL']
    table:                   'test.*'
    user:                    'elexis@localhost'
  "reader@localhost/elexis.*":
    ensure:                  present
    options:                 ['GRANT']
    privileges:              ['SELECT']
    table:                   'elexis.*'
    user:                    'reader@localhost'
  'reader@localhost/test.*':
    ensure:                  present
    options:                 ['GRANT']
    privileges:              ['SELECT']
    table:                   'test.*'
    user:                    'reader@localhost'

# some parameters for PostgreSQL users. We assume that we want it
# Allows you to set parameters in pg_hba.conf    
pg::config_hash:
  ip_mask_deny_postgres_user: '0.0.0.0/32'
  ip_mask_allow_all_users:    '10.0.2.0/24'
  listen_addresses:           '*'
  manage_redhat_firewall:     false
  postgres_password:          postgres

# next line(s) go into /etc/postgresql/9.1/main/postgresql_puppet_extras.conf
pg::archive_timeout: 20s
pg::puppet_extras: "archive_command = '/usr/bin/test ! -f /home/backup-pg/wal/%f && /bin/cp %p /home/backup-pg/wal/%f < /dev/null'\narchive_timeout = 20s\nautovacuum =      on"
